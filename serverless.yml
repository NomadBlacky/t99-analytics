# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: t99-analytics # NOTE: update this with your service name

frameworkVersion: "=1.39.1"

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
# Make sure to run "sbt assembly" to create a jar file
# with all your dependencies and put that jar file name here.
package:
  artifact: target/scala-2.12/t99.jar

functions:
  t99:
    role: t99FunctionRole
    handler: t99.lambda.Handler
    timeout: 30
    events:
      - http:
          path: execute
          method: post
    environment:
      AUTH_TOKEN: ${env:T99_AUTH_TOKEN}
      TWITTER_CONSUMER_KEY: ${env:T99_TWITTER_CONSUMER_KEY}
      TWITTER_CONSUMER_SECRET: ${env:T99_TWITTER_CONSUMER_SECRET}
      TWITTER_ACCESS_KEY: ${env:T99_TWITTER_ACCESS_KEY}
      TWITTER_ACCESS_SECRET: ${env:T99_TWITTER_ACCESS_SECRET}

resources:
  Resources:
    t99FunctionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: T99FunctionRole-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: t99FunctionPolicy-${self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        -
                          - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - rekognition:DetectText
                  Resource: "*"
